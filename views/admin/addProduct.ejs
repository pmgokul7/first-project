<%-include("../partials/top.ejs")%>
<%-include("../partials/header.ejs")%>
<!-- Your content goes here -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
        <div class="container">
            <form action="/admin/products/add" method="post" enctype="multipart/form-data">
                <div class="form-group">
                  <label for="exampleInputEmail1">Model</label>
                  <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Model" name="model" required>
                </div>
                
                <div class="sel d-flex mt-3">

                    <select class="form-control" id="exampleFormControlSelect1" name="brand">
                    <option>Brands</option>
                    <%for(i=0;i<=result.Brands.length-1;i++){%>
                        <option value="<%=result.Brands[i].name%>"><%=result.Brands[i].name%></option>
                        <%}%>
                  </select>
                  <select class="form-control" id="exampleFormControlSelect1" name="ROM">
                    <option>ROM</option>
                    <%for(i=0;i<=result.ROM.length-1;i++){%>
                    <option value="<%=result.ROM[i].storage%>"><%=result.ROM[i].storage%> GB</option>
                    <%}%>
                  </select>
                  <select class="form-control" id="exampleFormControlSelect1" name="RAM">
                    <option>RAM</option>
                    <%for(i=0;i<=result.RAM.length-1;i++){%>
                        <option value="<%=result.RAM[i].storage%>"><%=result.RAM[i].storage%> GB</option>
                        <%}%>
                    
                  </select>
                  <select class="form-control" id="exampleFormControlSelect1" name="category">
                    <option>Category</option>
                    <%for(i=0;i<=resul.length-1;i++){%>
                        <option value="<%=resul[i].name%>"><%=resul[i].name%> </option>
                        <%}%>
                    
                  </select>
                  <select class="form-control" id="exampleFormControlSelect1" name="OS">
                    <option>OS</option>
                    <%for(i=0;i<=result.OS.length-1;i++){%>
                        <option value="<%=result.OS[i].name%>"><%=result.OS[i].name%> </option>
                        <%}%>
                    
                  </select>
              
                </div>
                <div class="d-flex w-100 justify-content-between">
                    <div class="form-group me-3">
                        <label for="exampleInputEmail1">stock</label>
                        <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="stock" name="stock" required>
                      </div>
                      <div class="form-group me-3">
                        <label for="exampleInputEmail1 ">Price</label>
                        <input type="number" class="form-control  " id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="price" name="price" required>
                      </div>
                      <div class="form-group me-3">
                        <label for="exampleInputEmail1 ">offer price</label>
                        <input type="number" class="form-control  " id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="price" name="offerprice" required>
                      </div>
                      <div class="form-group me-3">
                        <label for="exampleInputEmail1 ">Rating</label>
                        <input type="number" class="form-control  " id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="rating" name="rating" required>
                      </div>
                      <div class="form-group ">
                        <label for="exampleInputEmail1 ">Color</label>
                        <input type="text" class="form-control  " id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="color" name="color" required>
                      </div>
                </div>
                <div class="d-flex flex-column">
<input type="text" placeholder="highlights" name="highlights" class="form-control mt-3" >
                <input type="text" placeholder="highlights" name="highlights"  class="form-control mt-3">
                <input type="text" placeholder="highlights" name="highlights" class="form-control mt-3">
                <input type="text" placeholder="highlights" name="highlights" class="mt-3 form-control">
                <input type="text" placeholder="highlights" name="highlights" class="mt-3 form-control">
                <label for="w3review">description:</label>

<textarea id="w3review" name="description" rows="4" cols="50" required>

</textarea>
              
                </div>
                <d class="fil d-flex flex-column">
        
                 





                    


                    <div class="row">
             
           

                   
                        



                      <div class="mt-5  col-md-4"> 
                    
                        
                        <input type="file" required id="id_image1" name="mainImage"  class="form-control imgbtn" onchange="viewImage1(event)"
                        style="width:100%;"><br>
                      <img src="" id="imgView1" alt="" class="clr" style="height:100px">
                     
                      <div class="vald-info" id="info"></div>
                      <h5 class="error_form text-danger" id="image1_error_message"></h5>
                      <div class="prev " style="display:flex ">
                        <div id="image-box1" class="clr image-container mb-4" style="height: 300px; width:20%"></div>
                        <button type="button" class="btn btn-secondary" id="crop-btn1" style="margin-top: 300px;width: 20%;" >Crop</button> 
                      </div>
                    </div>

                 
                           

                                 
                              
  </div>



                <input type="submit" class="btn btn-primary mt-3">
            </form>
            
                </div>
                        
                
              
        </div>
        
        </div>
        </main>
</body>
<style>
  .clr{
    display: none;
  }
</style>
        <script>


        

      
          </script>


<script>
  $(document).ready(()=>{
    $(".prev").hide()
  })
  $(".imgbtn").click(()=>{
    $(".prev").show()
  })

const imagebox1 = document.getElementById('image-box1')
const crop_btn1 = document.getElementById('crop-btn1')
const input1 = document.getElementById('id_image1')
function viewImage1(event) {
var fileInput1 = document.getElementById('id_image1');
var filePath1 = fileInput1.value;
var allowedExtensions = /(\.jpg)$/i;
if (!allowedExtensions.exec(filePath1)) {
  fileInput1.value = '';
  swal("There is a problem!", "Please choose image file.");
  return false;
} else {
  document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
}
}
// When user uploads the image this event will get triggered
input1.addEventListener('change', () => {
// Getting image file object from the input variable
const img_data1 = input1.files[0]
// createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
// The new object URL represents the specified File object or Blob object.
const url1 = URL.createObjectURL(img_data1)
// Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
// Storing that cropping view image in a variable
const image1 = document.getElementById('image1')
// Displaying the image box
document.getElementById('image-box1').style.display = 'block'
// Displaying the Crop buttton
document.getElementById('crop-btn1').style.display = 'block'
document.getElementById('imgView1').style.display = 'block'
// Hiding the Post button
const cropper1 = new Cropper(image1, {
  autoCropArea: 1,
  viewMode: 1,
  scalable: false,
  zoomable: false,
  movable: false,
  minCropBoxWidth: 50,
  minCropBoxHeight: 50,
  aspectRatio: 1 / 1,

})
// When crop button is clicked this event will get triggered
crop_btn1.addEventListener('click', () => {
  // This method coverts the selected cropped image on the cropper canvas into a blob object
  cropper1.getCroppedCanvas().toBlob((blob) => {
    // Gets the original image data
    let fileInputElement1 = document.getElementById('id_image1');
    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
    let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
    // Create a new container
    let container1 = new DataTransfer();
    // Add the cropped image file to the container
    container1.items.add(file1);
    // Replace the original image file with the new cropped image file
    fileInputElement1.files = container1.files;
    document.getElementById('imgView1').src = URL.createObjectURL(fileInputElement1.files[0])
    // Hide the cropper box
    document.getElementById('image-box1').style.display = 'none'
    // Hide the crop button
    document.getElementById('crop-btn1').style.display = 'none'
  })
})
})
const imagebox2 = document.getElementById('image-box2')
const crop_btn2 = document.getElementById('crop-btn2')
const input2 = document.getElementById('id_image2')
function viewImage2(event) {
var fileInput2 = document.getElementById('id_image2');
var filePath2 = fileInput2.value;
var allowedExtensions = /(\.jpg)$/i;
if (!allowedExtensions.exec(filePath2)) {
  fileInput1.value = '';
  swal("There is a problem!", "Please choose image file.");
  return false;
} else {
  document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
}
}
// When user uploads the image this event will get triggered
input2.addEventListener('change', () => {
// Getting image file object from the input variable
const img_data2 = input2.files[0]
// createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
// The new object URL represents the specified File object or Blob object.
const url2 = URL.createObjectURL(img_data2)
// Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`
// Storing that cropping view image in a variable
const image2 = document.getElementById('image2')
// Displaying the image box
document.getElementById('image-box2').style.display = 'block'
// Displaying the Crop buttton
document.getElementById('crop-btn2').style.display = 'block'

document.getElementById('imgView2').style.display = 'block'
// Hiding the Post button
const cropper2 = new Cropper(image2, {
  autoCropArea: 1,
  viewMode: 1,
  scalable: false,
  zoomable: false,
  movable: false,
  minCropBoxWidth: 50,
  minCropBoxHeight: 50,
  aspectRatio: 1 / 1,

})
// When crop button is clicked this event will get triggered
crop_btn2.addEventListener('click', () => {
  // This method coverts the selected cropped image on the cropper canvas into a blob object
  cropper2.getCroppedCanvas().toBlob((blob) => {
    // Gets the original image data
    let fileInputElement2 = document.getElementById('id_image2');
    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
    let file2 = new File([blob], img_data2.name, { type: "image/*", lastModified: new Date().getTime() });
    // Create a new container
    let container2 = new DataTransfer();
    // Add the cropped image file to the container
    container2.items.add(file2);
    // Replace the original image file with the new cropped image file
    fileInputElement2.files = container2.files;
    document.getElementById('imgView2').src = URL.createObjectURL(fileInputElement2.files[0])
    // Hide the cropper box
    document.getElementById('image-box2').style.display = 'none'
    // Hide the crop button
    document.getElementById('crop-btn2').style.display = 'none'
  })
})
})







const imagebox3 = document.getElementById('image-box3')
const crop_btn3 = document.getElementById('crop-btn3')
const input3 = document.getElementById('id_image3')
function viewImage3(event) {
var fileInput3 = document.getElementById('id_image3');
var filePath3 = fileInput3.value;
var allowedExtensions = /(\.jpg)$/i;
if (!allowedExtensions.exec(filePath3)) {
  fileInput3.value = '';
  swal("There is a problem!", "Please choose image file.");
  return false;
} else {
  document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
}
}
// When user uploads the image this event will get triggered
input3.addEventListener('change', () => {
// Getting image file object from the input variable
const img_data3 = input3.files[0]
// createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
// The new object URL represents the specified File object or Blob object.
const url3 = URL.createObjectURL(img_data3)
// Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`
// Storing that cropping view image in a variable
const image3 = document.getElementById('image3')
// Displaying the image box
document.getElementById('image-box3').style.display = 'block'
// Displaying the Crop buttton
document.getElementById('crop-btn3').style.display = 'block'
// Hiding the Post button
const cropper3 = new Cropper(image3, {
  autoCropArea: 1,
  viewMode: 1,
  scalable: false,
  zoomable: false,
  movable: false,
  minCropBoxWidth: 50,
  minCropBoxHeight: 50,
  
    aspectRatio: 1 / 1,
   

})

// When crop button is clicked this event will get triggered
crop_btn3.addEventListener('click', () => {
  // This method coverts the selected cropped image on the cropper canvas into a blob object
  cropper3.getCroppedCanvas().toBlob((blob) => {
    // Gets the original image data
    let fileInputElement3 = document.getElementById('id_image3');
    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
    let file3 = new File([blob], img_data3.name, { type: "image/*", lastModified: new Date().getTime() });
    // Create a new container
    let container3 = new DataTransfer();
    // Add the cropped image file to the container
    container3.items.add(file3);
    // Replace the original image file with the new cropped image file
    fileInputElement3.files = container3.files;
    document.getElementById('imgView3').src = URL.createObjectURL(fileInputElement3.files[0])
    // Hide the cropper box
    document.getElementById('image-box3').style.display = 'none'
    // Hide the crop button
    document.getElementById('crop-btn3').style.display = 'none'

    document.getElementById('imgView3').style.display = 'block'
  })
})
})


</script>
    
